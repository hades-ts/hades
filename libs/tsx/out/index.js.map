{"version":3,"sources":["../src/Base/DiscordComponents.ts","../src/components/Embed/Embed.ts","../src/components/ActionRow/ActionRow.ts","../src/components/ActionRow/Button.ts","../src/components/ActionRow/StringSelectMenu.ts","../src/components/ActionRow/UserSelectMenu.ts","../src/components/ActionRow/RoleSelectMenu.ts","../src/components/ActionRow/ChannelSelectMenu.ts"],"sourcesContent":["import { ActionRowBuilder, EmbedBuilder } from \"discord.js\";\r\nimport {\r\n    Atom,\r\n    ComponentFactory,\r\n    Component,\r\n    ComponentPropTypes,\r\n    FragmentResolvable,\r\n} from \"../typings/types\";\r\n\r\nexport class DiscordComponents {\r\n    static createComponent<P = ComponentPropTypes>(\r\n        component: ComponentFactory<P>,\r\n        props: P,\r\n        ...children: Atom[]\r\n    ): Component<P> {\r\n        if (component === undefined) return void 0 as any;\r\n        const element = component(props, children);\r\n        return element;\r\n    }\r\n\r\n    static Fragment(\r\n        props: null,\r\n        children: FragmentResolvable[],\r\n    ): { embeds: EmbedBuilder[]; components: ActionRowBuilder[] } {\r\n        if (props !== null)\r\n            throw new TypeError(\"Root fragments must not have props.\");\r\n\r\n        const components: ActionRowBuilder[] = [];\r\n        const embeds: EmbedBuilder[] = [];\r\n\r\n        if (!children || children.length === 0) return { components, embeds }; // Nothing to process.\r\n\r\n        children.forEach((atom) => {\r\n            // Only process if atom is a Component\r\n            if (typeof atom !== \"object\" || atom === null || !(\"type\" in atom))\r\n                return;\r\n\r\n            switch (atom.type) {\r\n                case \"ActionRow\":\r\n                    components.push(atom.resolve(atom.props, atom.children));\r\n                    break;\r\n                case \"Embed\":\r\n                    embeds.push(atom.resolve(atom.props, atom.children));\r\n                    break;\r\n                default:\r\n                    throw new TypeError(`Unsupported parent component: \"${atom}\"!`);\r\n            }\r\n        });\r\n\r\n        return {\r\n            embeds,\r\n            components,\r\n        };\r\n    }\r\n}\r\n","import {\r\n    EmbedAuthorOptions,\r\n    ColorResolvable,\r\n    EmbedImageData,\r\n    EmbedFooterOptions,\r\n    APIEmbedField,\r\n    EmbedBuilder,\r\n} from \"discord.js\";\r\nimport { BuilderComponent, EmbedPropertyComponent } from \"../../typings/types.js\";\r\n\r\nexport type EmbedResolvable =\r\n    | EmbedAuthorComponent\r\n    | EmbedFooterComponent\r\n    | EmbedFieldsComponent\r\n    | EmbedThumbnailComponent\r\n    | EmbedImageComponent;\r\n\r\nexport interface EmbedProps {\r\n    color?: ColorResolvable;\r\n    timestamp?: Date | number;\r\n    description?: string;\r\n    title?: string;\r\n    url?: string;\r\n}\r\n\r\nexport type EmbedComponent = BuilderComponent<EmbedBuilder, EmbedProps, EmbedResolvable[]> & {\r\n    type: \"Embed\";\r\n};\r\n\r\nexport const EmbedResolver = (props: EmbedProps, children: EmbedResolvable[]) => {\r\n    const embed = new EmbedBuilder();\r\n    const { color, timestamp, description, title, url } = props;\r\n\r\n    if (color) embed.setColor(color);\r\n    if (timestamp) embed.setTimestamp(timestamp);\r\n    if (description) embed.setDescription(description);\r\n    if (title) embed.setTitle(title);\r\n    if (url) embed.setURL(url);\r\n\r\n    for (const child of children) {\r\n        if (typeof child === \"object\" && \"type\" in child) {\r\n            child.resolve(embed, child.props as any, child.children as any);\r\n        }\r\n    }\r\n\r\n    return embed;\r\n}\r\n\r\nexport function Embed(\r\n    props: EmbedProps,\r\n    children: EmbedResolvable[]\r\n): EmbedComponent {\r\n    return {\r\n        type: \"Embed\" as const,\r\n        props,\r\n        children,\r\n        resolve: EmbedResolver,\r\n    };\r\n}\r\n\r\nexport type EmbedAuthorComponent = EmbedPropertyComponent<EmbedAuthorOptions> & {\r\n    type: \"EmbedAuthor\";\r\n};\r\n\r\nexport function EmbedAuthor(\r\n    props: EmbedAuthorOptions,\r\n    _children: undefined\r\n): EmbedAuthorComponent {\r\n    return {\r\n        type: \"EmbedAuthor\",\r\n        props,\r\n        resolve: (builder: EmbedBuilder, props: EmbedAuthorOptions) => {\r\n            builder.setAuthor(props);\r\n        },\r\n    };\r\n}\r\n\r\nexport type EmbedFooterComponent = EmbedPropertyComponent<EmbedFooterOptions> & {\r\n    type: \"EmbedFooter\";\r\n};\r\n\r\nexport function EmbedBuilderFooter(\r\n    props: EmbedFooterOptions,\r\n    _children: undefined\r\n): EmbedFooterComponent {\r\n    return {\r\n        type: \"EmbedFooter\",\r\n        props,\r\n        resolve: (builder: EmbedBuilder, props: EmbedFooterOptions) => {\r\n            builder.setFooter(props);\r\n        },\r\n    };\r\n}\r\n\r\nexport type EmbedFieldsComponent = EmbedPropertyComponent<{}, EmbedPropertyComponent[]> & { type: \"EmbedFields\" };\r\n\r\nexport function EmbedFields(\r\n    _props: any,\r\n    children: EmbedFieldComponent[] | EmbedFieldComponent[][]\r\n): EmbedFieldsComponent {\r\n    return {\r\n        type: \"EmbedFields\",\r\n        props: {},\r\n        resolve: (builder: EmbedBuilder, props: {}, children: EmbedPropertyComponent[]) => {\r\n            children.forEach(child => child.resolve(builder, child.props as any, child.children as any))\r\n        },\r\n    };\r\n}\r\n\r\nexport type EmbedFieldComponent = EmbedPropertyComponent<APIEmbedField> & {\r\n    type: \"EmbedField\";\r\n};\r\n\r\nexport function EmbedField(\r\n    props: APIEmbedField,\r\n    _children: undefined\r\n): EmbedFieldComponent {\r\n    return {\r\n        type: \"EmbedField\",\r\n        props,\r\n        resolve: (builder: EmbedBuilder, props: APIEmbedField) => {\r\n            builder.addFields(props);\r\n        },\r\n    };\r\n}\r\n\r\nexport type EmbedThumbnailComponent = EmbedPropertyComponent<EmbedImageData> & {\r\n    type: \"EmbedThumbnail\";\r\n};\r\nexport function EmbedBuilderThumbnail(\r\n    props: EmbedImageData,\r\n    _children: undefined\r\n): EmbedThumbnailComponent {\r\n    return {\r\n        type: \"EmbedThumbnail\",\r\n        props,\r\n        resolve: (builder: EmbedBuilder, props: EmbedImageData) => {\r\n            builder.setThumbnail(props.url);\r\n        },\r\n    };\r\n}\r\n\r\nexport type EmbedImageComponent = EmbedPropertyComponent<EmbedImageData> & {\r\n    type: \"EmbedImage\";\r\n};\r\nexport function EmbedBuilderImage(\r\n    props: EmbedImageData,\r\n    _children: undefined\r\n): EmbedImageComponent {\r\n    return {\r\n        type: \"EmbedImage\",\r\n        props,\r\n        resolve: (builder: EmbedBuilder, props: EmbedImageData) => {\r\n            builder.setImage(props.url);\r\n        },\r\n    };\r\n}\r\n","import { BuilderComponent, Component } from \"../../typings/types.js\";\r\nimport { ButtonComponent } from \"./Button.js\";\r\nimport { StringSelectMenuComponent } from \"./StringSelectMenu.js\";\r\nimport { UserSelectMenuComponent } from \"./UserSelectMenu.js\";\r\nimport { RoleSelectMenuComponent } from \"./RoleSelectMenu.js\";\r\nimport { ChannelSelectMenuComponent } from \"./ChannelSelectMenu.js\";\r\nimport { ActionRowBuilder } from \"discord.js\";\r\n\r\nexport type ActionRowResolvable =\r\n    | ButtonComponent\r\n    | StringSelectMenuComponent\r\n    | UserSelectMenuComponent\r\n    | RoleSelectMenuComponent\r\n    | ChannelSelectMenuComponent\r\n\r\nexport type ActionRowComponent =\r\n    BuilderComponent<\r\n        ActionRowBuilder,\r\n        {},\r\n        ActionRowResolvable[] | ActionRowResolvable[][]\r\n    > & { type: \"ActionRow\" };\r\n\r\nexport const ActionRowResolver = (props: {}, children: ActionRowResolvable[] | ActionRowResolvable[][]) => {\r\n    const actionRow = new ActionRowBuilder();\r\n\r\n    for (const child of children) {\r\n        if (typeof child === \"object\" && \"type\" in child) {\r\n            actionRow.addComponents(child.resolve(child.props as any, child.children as any));\r\n        }\r\n    }\r\n\r\n    return actionRow;\r\n}\r\n\r\nexport function ActionRow(\r\n    _props: {},\r\n    children: ActionRowResolvable[]\r\n): ActionRowComponent {\r\n    return {\r\n        type: \"ActionRow\",\r\n        props: {},\r\n        children,\r\n        resolve: ActionRowResolver,\r\n    };\r\n}\r\n","import { ButtonBuilder, ButtonComponentData, InteractionButtonComponentData, LinkButtonComponentData } from \"discord.js\";\r\nimport { BuilderComponent, Component } from \"../../typings/types.js\";\r\n\r\nexport type ButtonOptions = Omit<InteractionButtonComponentData, \"type\">;\r\n\r\nexport type ButtonComponent = BuilderComponent<ButtonBuilder, ButtonOptions, undefined> & { type: \"Button\" };\r\n\r\nexport const ButtonResolver = (props: ButtonOptions) => {\r\n    const button = new ButtonBuilder();\r\n    const { customId, style, label, emoji } = props;\r\n\r\n    if (customId) button.setCustomId(customId);\r\n    if (style) button.setStyle(style);\r\n    if (label) button.setLabel(label);\r\n    if (emoji) button.setEmoji(emoji);\r\n\r\n    return button;\r\n}\r\n\r\nexport function Button(props: ButtonOptions): ButtonComponent {\r\n    return {\r\n        type: \"Button\",\r\n        props,\r\n        resolve: ButtonResolver,\r\n    };\r\n}\r\n\r\nexport type LinkButtonOptions = Omit<LinkButtonComponentData, \"type\">;\r\n\r\nexport type LinkButtonComponent = BuilderComponent<ButtonBuilder, LinkButtonOptions, undefined> & { type: \"LinkButton\" };\r\n\r\nexport const LinkButtonResolver = (props: LinkButtonOptions) => {\r\n    const button = new ButtonBuilder();\r\n    const { url, style, label, emoji } = props;\r\n\r\n    if (url) button.setURL(url);\r\n    if (style) button.setStyle(style);\r\n    if (label) button.setLabel(label);\r\n    if (emoji) button.setEmoji(emoji);\r\n\r\n    return button;\r\n}\r\n\r\nexport function LinkButton(props: LinkButtonOptions): LinkButtonComponent {\r\n    return {\r\n        type: \"LinkButton\",\r\n        props,\r\n        resolve: LinkButtonResolver,\r\n    };\r\n}\r\n","import {\r\n    SelectMenuComponentOptionData,\r\n    SelectMenuOptionBuilder,\r\n    StringSelectMenuBuilder,\r\n    StringSelectMenuComponentData,\r\n    StringSelectMenuOptionBuilder,\r\n} from \"discord.js\";\r\nimport { BuilderComponent, Component } from \"../../typings/types.js\";\r\n\r\nexport type StringSelectMenuOptions = Omit<StringSelectMenuComponentData, \"type\" | \"options\">;\r\n\r\nexport type StringSelectMenuComponent =\r\n    BuilderComponent<\r\n        StringSelectMenuBuilder,\r\n        StringSelectMenuOptions,\r\n        SelectMenuOptionComponent[] | SelectMenuOptionComponent[][]\r\n    > & { type: \"StringSelectMenu\" };\r\n\r\nfunction extractOptions(children: any): StringSelectMenuOptionBuilder[] {\r\n    if (!children) return [];\r\n\r\n    const childArray = Array.isArray(children) ? children : [children];\r\n    return childArray.map(createOption);\r\n}\r\n\r\nfunction createOption(option: SelectMenuOptionComponent): StringSelectMenuOptionBuilder {\r\n    const builder = new StringSelectMenuOptionBuilder();\r\n    const { default: isDefault, description, label, value, emoji } = option.props;\r\n\r\n    if (isDefault) builder.setDefault(isDefault);\r\n    if (description) builder.setDescription(description);\r\n    if (label) builder.setLabel(label);\r\n    if (value) builder.setValue(value);\r\n    if (emoji) builder.setEmoji(emoji);\r\n\r\n    return builder;\r\n}\r\n\r\nexport const StringSelectMenuResolver = (props: StringSelectMenuOptions, children: SelectMenuOptionComponent[] | SelectMenuOptionComponent[][]) => {\r\n    const selectMenu = new StringSelectMenuBuilder();\r\n    const { customId, placeholder } = props;\r\n\r\n    // Set properties if they exist\r\n    if (customId) selectMenu.setCustomId(customId);\r\n    if (placeholder) selectMenu.setPlaceholder(placeholder);\r\n\r\n    const options = children.map(child => child.resolve(child.props));\r\n\r\n    if (options.length > 0) {\r\n        selectMenu.addOptions(options);\r\n    }\r\n\r\n    // Only set default placeholder if none was provided\r\n    if (!placeholder) {\r\n        selectMenu.setPlaceholder(\"Select an option!!\");\r\n    }\r\n\r\n    return selectMenu;\r\n}\r\n\r\nexport function StringSelectMenu(\r\n    props: StringSelectMenuOptions,\r\n    children: SelectMenuOptionComponent[] | SelectMenuOptionComponent[][]\r\n): StringSelectMenuComponent {\r\n    return {\r\n        type: \"StringSelectMenu\",\r\n        props,\r\n        children,\r\n        resolve: StringSelectMenuResolver,\r\n    };\r\n}\r\n\r\nexport type SelectMenuOptionOptions = SelectMenuComponentOptionData;\r\n\r\nexport type SelectMenuOptionComponent = BuilderComponent<StringSelectMenuOptionBuilder, SelectMenuComponentOptionData, undefined> & { type: \"SelectMenuOption\" };\r\n\r\nexport const SelectMenuOptionResolver = (props: SelectMenuComponentOptionData) => {\r\n    const selectMenuOption = new StringSelectMenuOptionBuilder();\r\n    const { label, value, description, emoji } = props;\r\n\r\n    if (label) selectMenuOption.setLabel(label);\r\n    if (value) selectMenuOption.setValue(value);\r\n    if (description) selectMenuOption.setDescription(description);\r\n    if (emoji) selectMenuOption.setEmoji(emoji);\r\n\r\n    return selectMenuOption;\r\n}\r\n\r\nexport function SelectMenuOption(props: SelectMenuComponentOptionData): SelectMenuOptionComponent {\r\n    return {\r\n        type: \"SelectMenuOption\",\r\n        props,\r\n        resolve: SelectMenuOptionResolver,\r\n    };\r\n}\r\n","import {\r\n    UserSelectMenuBuilder,\r\n    UserSelectMenuComponentData,\r\n} from \"discord.js\";\r\nimport { BuilderComponent } from \"../../typings/types.js\";\r\n\r\nexport type UserSelectMenuOptions = Omit<UserSelectMenuComponentData, \"type\" | \"options\">;\r\n\r\nexport type UserSelectMenuComponent = BuilderComponent<UserSelectMenuBuilder, UserSelectMenuOptions, undefined> & {\r\n    type: \"UserSelectMenu\";\r\n};\r\n\r\nexport const UserSelectMenuResolver = (props: UserSelectMenuOptions) => {\r\n    const userSelectMenu = new UserSelectMenuBuilder();\r\n    const { customId, placeholder } = props;\r\n\r\n    if (customId) userSelectMenu.setCustomId(customId);\r\n    if (placeholder) userSelectMenu.setPlaceholder(placeholder);\r\n\r\n    if (!placeholder) {\r\n        userSelectMenu.setPlaceholder(\"Select a user\");\r\n    }\r\n\r\n    return userSelectMenu;\r\n}\r\n\r\nexport function UserSelectMenu(props: UserSelectMenuOptions): UserSelectMenuComponent {\r\n    return {\r\n        type: \"UserSelectMenu\",\r\n        props,\r\n        resolve: UserSelectMenuResolver,\r\n    };\r\n}\r\n","import {\r\n    RoleSelectMenuBuilder,\r\n    RoleSelectMenuComponentData,\r\n} from \"discord.js\";\r\nimport { BuilderComponent } from \"../../typings/types.js\";\r\n\r\nexport type RoleSelectMenuOptions = Omit<RoleSelectMenuComponentData, \"type\" | \"options\">;\r\n\r\nexport type RoleSelectMenuComponent = BuilderComponent<RoleSelectMenuBuilder, RoleSelectMenuOptions, undefined> & {\r\n    type: \"RoleSelectMenu\";\r\n};\r\n\r\nexport const RoleSelectMenuResolver = (props: RoleSelectMenuOptions) => {\r\n    const roleSelectMenu = new RoleSelectMenuBuilder();\r\n    const { customId, placeholder } = props;\r\n\r\n    if (customId) roleSelectMenu.setCustomId(customId);\r\n    if (placeholder) roleSelectMenu.setPlaceholder(placeholder);\r\n\r\n    if (!placeholder) {\r\n        roleSelectMenu.setPlaceholder(\"Select a role\");\r\n    }\r\n\r\n    return roleSelectMenu;\r\n}\r\n\r\nexport function RoleSelectMenu(\r\n    props: RoleSelectMenuOptions,\r\n): RoleSelectMenuComponent {\r\n    return {\r\n        type: \"RoleSelectMenu\",\r\n        props,\r\n        resolve: RoleSelectMenuResolver,\r\n    };\r\n}\r\n","import {\r\n    ChannelSelectMenuBuilder,\r\n    ChannelSelectMenuComponentData,\r\n} from \"discord.js\";\r\nimport { BuilderComponent } from \"../../typings/types.js\";\r\n\r\nexport type ChannelSelectMenuOptions =\r\n    Omit<ChannelSelectMenuComponentData, \"type\" | \"options\">;\r\n\r\nexport type ChannelSelectMenuComponent =\r\n    BuilderComponent<ChannelSelectMenuBuilder, ChannelSelectMenuOptions, undefined> & {\r\n        type: \"ChannelSelectMenu\";\r\n    };\r\n\r\nexport const ChannelSelectMenuResolver = (props: ChannelSelectMenuOptions) => {\r\n    const channelSelectMenu = new ChannelSelectMenuBuilder();\r\n    const { customId, placeholder, maxValues, minValues, channelTypes } = props;\r\n\r\n    if (customId) channelSelectMenu.setCustomId(customId);\r\n    if (placeholder) channelSelectMenu.setPlaceholder(placeholder);\r\n\r\n    if (!placeholder) {\r\n        channelSelectMenu.setPlaceholder(\"Select a channel\");\r\n    }\r\n\r\n    if (maxValues) channelSelectMenu.setMaxValues(maxValues);\r\n    if (minValues) channelSelectMenu.setMinValues(minValues);\r\n    if (channelTypes) channelSelectMenu.addChannelTypes(...channelTypes);\r\n\r\n    return channelSelectMenu;\r\n}\r\n\r\nexport function ChannelSelectMenu(props: ChannelSelectMenuOptions): ChannelSelectMenuComponent {\r\n    return { type: \"ChannelSelectMenu\", props, resolve: ChannelSelectMenuResolver };\r\n}\r\n"],"mappings":"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","names":["DiscordComponents","component","props","children","components","embeds","atom","EmbedBuilder","EmbedResolver","props","children","embed","color","timestamp","description","title","url","child","Embed","EmbedAuthor","_children","builder","EmbedBuilderFooter","EmbedFields","_props","EmbedField","EmbedBuilderThumbnail","EmbedBuilderImage","ActionRowBuilder","ActionRowResolver","props","children","actionRow","child","ActionRow","_props","ButtonBuilder","ButtonResolver","props","button","customId","style","label","emoji","Button","LinkButtonResolver","url","LinkButton","StringSelectMenuBuilder","StringSelectMenuOptionBuilder","StringSelectMenuResolver","props","children","selectMenu","StringSelectMenuBuilder","customId","placeholder","options","child","StringSelectMenu","SelectMenuOptionResolver","selectMenuOption","StringSelectMenuOptionBuilder","label","value","description","emoji","SelectMenuOption","UserSelectMenuBuilder","UserSelectMenuResolver","props","userSelectMenu","customId","placeholder","UserSelectMenu","RoleSelectMenuBuilder","RoleSelectMenuResolver","props","roleSelectMenu","customId","placeholder","RoleSelectMenu","ChannelSelectMenuBuilder","ChannelSelectMenuResolver","props","channelSelectMenu","customId","placeholder","maxValues","minValues","channelTypes","ChannelSelectMenu"]}