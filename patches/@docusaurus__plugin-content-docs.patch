diff --git a/src/index.ts b/src/index.ts
index a740b7f5e2964341e952394742a930f491ff7f65..cd5817a37839161f5b7f9736f6ca023361da3af2 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -9,283 +9,285 @@ import path from 'path';
 import fs from 'fs-extra';
 import logger from '@docusaurus/logger';
 import {
-  normalizeUrl,
-  docuHash,
-  aliasedSitePath,
-  getContentPathList,
-  posixPath,
-  addTrailingPathSeparator,
-  createAbsoluteFilePathMatcher,
-  resolveMarkdownLinkPathname,
-  DEFAULT_PLUGIN_ID,
+    normalizeUrl,
+    docuHash,
+    aliasedSitePath,
+    getContentPathList,
+    posixPath,
+    addTrailingPathSeparator,
+    createAbsoluteFilePathMatcher,
+    resolveMarkdownLinkPathname,
+    DEFAULT_PLUGIN_ID,
 } from '@docusaurus/utils';
-import {getTagsFilePathsToWatch} from '@docusaurus/utils-validation';
-import {createMDXLoaderRule} from '@docusaurus/mdx-loader';
-import {resolveSidebarPathOption} from './sidebars';
-import {CategoryMetadataFilenamePattern} from './sidebars/generator';
-import {type DocEnv} from './docs';
+import { getTagsFilePathsToWatch } from '@docusaurus/utils-validation';
+import { createMDXLoaderRule } from '@docusaurus/mdx-loader';
+import { resolveSidebarPathOption } from './sidebars';
+import { CategoryMetadataFilenamePattern } from './sidebars/generator';
+import { type DocEnv } from './docs';
 import {
-  getVersionFromSourceFilePath,
-  readVersionsMetadata,
-  toFullVersion,
+    getVersionFromSourceFilePath,
+    readVersionsMetadata,
+    toFullVersion,
 } from './versions/version';
 import cliDocs from './cli';
-import {VERSIONS_JSON_FILE} from './constants';
-import {toGlobalDataVersion} from './globalData';
+import { VERSIONS_JSON_FILE } from './constants';
+import { toGlobalDataVersion } from './globalData';
 import {
-  translateLoadedContent,
-  getLoadedContentTranslationFiles,
+    translateLoadedContent,
+    getLoadedContentTranslationFiles,
 } from './translations';
-import {createAllRoutes} from './routes';
+import { createAllRoutes } from './routes';
 
-import {createContentHelpers} from './contentHelpers';
-import {loadVersion} from './versions/loadVersion';
+import { createContentHelpers } from './contentHelpers';
+import { loadVersion } from './versions/loadVersion';
 import type {
-  PluginOptions,
-  VersionMetadata,
-  DocFrontMatter,
-  LoadedContent,
+    PluginOptions,
+    VersionMetadata,
+    DocFrontMatter,
+    LoadedContent,
 } from '@docusaurus/plugin-content-docs';
-import type {LoadContext, Plugin} from '@docusaurus/types';
-import type {FullVersion} from './types';
-import type {RuleSetRule} from 'webpack';
+import type { LoadContext, Plugin } from '@docusaurus/types';
+import type { FullVersion } from './types';
+import type { RuleSetRule } from 'webpack';
+
+export * from './sidebars/types';
 
 // MDX loader is not 100% deterministic, leading to cache invalidation issue
 // This permits to invalidate the MDX loader cache entries when content changes
 // Problem documented here: https://github.com/facebook/docusaurus/pull/10934
 // TODO this is not a perfect solution, find better?
 async function createMdxLoaderDependencyFile({
-  dataDir,
-  options,
-  versionsMetadata,
-}: {
-  dataDir: string;
-  options: PluginOptions;
-  versionsMetadata: VersionMetadata[];
-}): Promise<string | undefined> {
-  const filePath = path.join(dataDir, '__mdx-loader-dependency.json');
-  // the cache is invalidated whenever this file content changes
-  const fileContent = {
+    dataDir,
     options,
     versionsMetadata,
-  };
-  await fs.ensureDir(dataDir);
-  await fs.writeFile(filePath, JSON.stringify(fileContent));
-  return filePath;
+}: {
+    dataDir: string;
+    options: PluginOptions;
+    versionsMetadata: VersionMetadata[];
+}): Promise<string | undefined> {
+    const filePath = path.join(dataDir, '__mdx-loader-dependency.json');
+    // the cache is invalidated whenever this file content changes
+    const fileContent = {
+        options,
+        versionsMetadata,
+    };
+    await fs.ensureDir(dataDir);
+    await fs.writeFile(filePath, JSON.stringify(fileContent));
+    return filePath;
 }
 
 export default async function pluginContentDocs(
-  context: LoadContext,
-  options: PluginOptions,
+    context: LoadContext,
+    options: PluginOptions,
 ): Promise<Plugin<LoadedContent>> {
-  const {siteDir, generatedFilesDir, baseUrl, siteConfig} = context;
-  // Mutate options to resolve sidebar path according to siteDir
-  options.sidebarPath = resolveSidebarPathOption(siteDir, options.sidebarPath);
+    const { siteDir, generatedFilesDir, baseUrl, siteConfig } = context;
+    // Mutate options to resolve sidebar path according to siteDir
+    options.sidebarPath = resolveSidebarPathOption(siteDir, options.sidebarPath);
 
-  const versionsMetadata = await readVersionsMetadata({context, options});
+    const versionsMetadata = await readVersionsMetadata({ context, options });
 
-  const pluginId = options.id;
+    const pluginId = options.id;
 
-  const pluginDataDirRoot = path.join(
-    generatedFilesDir,
-    'docusaurus-plugin-content-docs',
-  );
-  const dataDir = path.join(pluginDataDirRoot, pluginId);
-  // TODO Docusaurus v4 breaking change
-  //  module aliasing should be automatic
-  //  we should never find local absolute FS paths in the codegen registry
-  const aliasedSource = (source: string) =>
-    `~docs/${posixPath(path.relative(pluginDataDirRoot, source))}`;
+    const pluginDataDirRoot = path.join(
+        generatedFilesDir,
+        'docusaurus-plugin-content-docs',
+    );
+    const dataDir = path.join(pluginDataDirRoot, pluginId);
+    // TODO Docusaurus v4 breaking change
+    //  module aliasing should be automatic
+    //  we should never find local absolute FS paths in the codegen registry
+    const aliasedSource = (source: string) =>
+        `~docs/${posixPath(path.relative(pluginDataDirRoot, source))}`;
 
-  // TODO env should be injected into all plugins
-  const env = process.env.NODE_ENV as DocEnv;
+    // TODO env should be injected into all plugins
+    const env = process.env.NODE_ENV as DocEnv;
 
-  const contentHelpers = createContentHelpers();
+    const contentHelpers = createContentHelpers();
 
-  async function createDocsMDXLoaderRule(): Promise<RuleSetRule> {
-    const {
-      rehypePlugins,
-      remarkPlugins,
-      recmaPlugins,
-      beforeDefaultRehypePlugins,
-      beforeDefaultRemarkPlugins,
-    } = options;
-    const contentDirs = versionsMetadata
-      .flatMap(getContentPathList)
-      // Trailing slash is important, see https://github.com/facebook/docusaurus/pull/3970
-      .map(addTrailingPathSeparator);
+    async function createDocsMDXLoaderRule(): Promise<RuleSetRule> {
+        const {
+            rehypePlugins,
+            remarkPlugins,
+            recmaPlugins,
+            beforeDefaultRehypePlugins,
+            beforeDefaultRemarkPlugins,
+        } = options;
+        const contentDirs = versionsMetadata
+            .flatMap(getContentPathList)
+            // Trailing slash is important, see https://github.com/facebook/docusaurus/pull/3970
+            .map(addTrailingPathSeparator);
 
-    return createMDXLoaderRule({
-      include: contentDirs,
-      options: {
-        dependencies: [
-          await createMdxLoaderDependencyFile({
-            dataDir,
-            options,
-            versionsMetadata,
-          }),
-        ].filter((d): d is string => typeof d === 'string'),
-
-        useCrossCompilerCache:
-          siteConfig.future.experimental_faster.mdxCrossCompilerCache,
-        admonitions: options.admonitions,
-        remarkPlugins,
-        rehypePlugins,
-        recmaPlugins,
-        beforeDefaultRehypePlugins,
-        beforeDefaultRemarkPlugins,
-        staticDirs: siteConfig.staticDirectories.map((dir) =>
-          path.resolve(siteDir, dir),
-        ),
-        siteDir,
-        isMDXPartial: createAbsoluteFilePathMatcher(
-          options.exclude,
-          contentDirs,
-        ),
-        metadataPath: (mdxPath: string) => {
-          // Note that metadataPath must be the same/in-sync as
-          // the path from createData for each MDX.
-          const aliasedPath = aliasedSitePath(mdxPath, siteDir);
-          return path.join(dataDir, `${docuHash(aliasedPath)}.json`);
-        },
-        // createAssets converts relative paths to require() calls
-        createAssets: ({frontMatter}: {frontMatter: DocFrontMatter}) => ({
-          image: frontMatter.image,
-        }),
-        markdownConfig: siteConfig.markdown,
-        resolveMarkdownLink: ({linkPathname, sourceFilePath}) => {
-          const version = getVersionFromSourceFilePath(
-            sourceFilePath,
-            versionsMetadata,
-          );
-          const permalink = resolveMarkdownLinkPathname(linkPathname, {
-            sourceFilePath,
-            sourceToPermalink: contentHelpers.sourceToPermalink,
-            siteDir,
-            contentPaths: version,
-          });
-          if (permalink === null) {
-            logger.report(
-              siteConfig.onBrokenMarkdownLinks,
-            )`Docs markdown link couldn't be resolved: (url=${linkPathname}) in source file path=${sourceFilePath} for version number=${version.versionName}`;
-          }
-          return permalink;
-        },
-      },
-    });
-  }
+        return createMDXLoaderRule({
+            include: contentDirs,
+            options: {
+                dependencies: [
+                    await createMdxLoaderDependencyFile({
+                        dataDir,
+                        options,
+                        versionsMetadata,
+                    }),
+                ].filter((d): d is string => typeof d === 'string'),
 
-  const docsMDXLoaderRule = await createDocsMDXLoaderRule();
+                useCrossCompilerCache:
+                    siteConfig.future.experimental_faster.mdxCrossCompilerCache,
+                admonitions: options.admonitions,
+                remarkPlugins,
+                rehypePlugins,
+                recmaPlugins,
+                beforeDefaultRehypePlugins,
+                beforeDefaultRemarkPlugins,
+                staticDirs: siteConfig.staticDirectories.map((dir) =>
+                    path.resolve(siteDir, dir),
+                ),
+                siteDir,
+                isMDXPartial: createAbsoluteFilePathMatcher(
+                    options.exclude,
+                    contentDirs,
+                ),
+                metadataPath: (mdxPath: string) => {
+                    // Note that metadataPath must be the same/in-sync as
+                    // the path from createData for each MDX.
+                    const aliasedPath = aliasedSitePath(mdxPath, siteDir);
+                    return path.join(dataDir, `${docuHash(aliasedPath)}.json`);
+                },
+                // createAssets converts relative paths to require() calls
+                createAssets: ({ frontMatter }: { frontMatter: DocFrontMatter }) => ({
+                    image: frontMatter.image,
+                }),
+                markdownConfig: siteConfig.markdown,
+                resolveMarkdownLink: ({ linkPathname, sourceFilePath }) => {
+                    const version = getVersionFromSourceFilePath(
+                        sourceFilePath,
+                        versionsMetadata,
+                    );
+                    const permalink = resolveMarkdownLinkPathname(linkPathname, {
+                        sourceFilePath,
+                        sourceToPermalink: contentHelpers.sourceToPermalink,
+                        siteDir,
+                        contentPaths: version,
+                    });
+                    if (permalink === null) {
+                        logger.report(
+                            siteConfig.onBrokenMarkdownLinks,
+                        )`Docs markdown link couldn't be resolved: (url=${linkPathname}) in source file path=${sourceFilePath} for version number=${version.versionName}`;
+                    }
+                    return permalink;
+                },
+            },
+        });
+    }
 
-  return {
-    name: 'docusaurus-plugin-content-docs',
+    const docsMDXLoaderRule = await createDocsMDXLoaderRule();
 
-    extendCli(cli) {
-      const isDefaultPluginId = pluginId === DEFAULT_PLUGIN_ID;
+    return {
+        name: 'docusaurus-plugin-content-docs',
 
-      // Need to create one distinct command per plugin instance
-      // otherwise 2 instances would try to execute the command!
-      const command = isDefaultPluginId
-        ? 'docs:version'
-        : `docs:version:${pluginId}`;
-      const commandDescription = isDefaultPluginId
-        ? 'Tag a new docs version'
-        : `Tag a new docs version (${pluginId})`;
+        extendCli(cli) {
+            const isDefaultPluginId = pluginId === DEFAULT_PLUGIN_ID;
 
-      cli
-        .command(command)
-        .arguments('<version>')
-        .description(commandDescription)
-        .action((version: unknown) =>
-          cliDocs.cliDocsVersionCommand(version, options, context),
-        );
-    },
+            // Need to create one distinct command per plugin instance
+            // otherwise 2 instances would try to execute the command!
+            const command = isDefaultPluginId
+                ? 'docs:version'
+                : `docs:version:${pluginId}`;
+            const commandDescription = isDefaultPluginId
+                ? 'Tag a new docs version'
+                : `Tag a new docs version (${pluginId})`;
 
-    getTranslationFiles({content}) {
-      return getLoadedContentTranslationFiles(content);
-    },
+            cli
+                .command(command)
+                .arguments('<version>')
+                .description(commandDescription)
+                .action((version: unknown) =>
+                    cliDocs.cliDocsVersionCommand(version, options, context),
+                );
+        },
 
-    getPathsToWatch() {
-      function getVersionPathsToWatch(version: VersionMetadata): string[] {
-        const result = [
-          ...options.include.flatMap((pattern) =>
-            getContentPathList(version).map(
-              (docsDirPath) => `${docsDirPath}/${pattern}`,
-            ),
-          ),
-          ...getTagsFilePathsToWatch({
-            contentPaths: version,
-            tags: options.tags,
-          }),
-          `${version.contentPath}/**/${CategoryMetadataFilenamePattern}`,
-        ];
-        if (typeof version.sidebarFilePath === 'string') {
-          result.unshift(version.sidebarFilePath);
-        }
-        return result;
-      }
+        getTranslationFiles({ content }) {
+            return getLoadedContentTranslationFiles(content);
+        },
 
-      return versionsMetadata.flatMap(getVersionPathsToWatch);
-    },
+        getPathsToWatch() {
+            function getVersionPathsToWatch(version: VersionMetadata): string[] {
+                const result = [
+                    ...options.include.flatMap((pattern) =>
+                        getContentPathList(version).map(
+                            (docsDirPath) => `${docsDirPath}/${pattern}`,
+                        ),
+                    ),
+                    ...getTagsFilePathsToWatch({
+                        contentPaths: version,
+                        tags: options.tags,
+                    }),
+                    `${version.contentPath}/**/${CategoryMetadataFilenamePattern}`,
+                ];
+                if (typeof version.sidebarFilePath === 'string') {
+                    result.unshift(version.sidebarFilePath);
+                }
+                return result;
+            }
 
-    async loadContent() {
-      return {
-        loadedVersions: await Promise.all(
-          versionsMetadata.map((versionMetadata) =>
-            loadVersion({
-              context,
-              options,
-              env,
-              versionMetadata,
-            }),
-          ),
-        ),
-      };
-    },
+            return versionsMetadata.flatMap(getVersionPathsToWatch);
+        },
 
-    translateContent({content, translationFiles}) {
-      return translateLoadedContent(content, translationFiles);
-    },
+        async loadContent() {
+            return {
+                loadedVersions: await Promise.all(
+                    versionsMetadata.map((versionMetadata) =>
+                        loadVersion({
+                            context,
+                            options,
+                            env,
+                            versionMetadata,
+                        }),
+                    ),
+                ),
+            };
+        },
 
-    async contentLoaded({content, actions}) {
-      contentHelpers.updateContent(content);
+        translateContent({ content, translationFiles }) {
+            return translateLoadedContent(content, translationFiles);
+        },
 
-      const versions: FullVersion[] = content.loadedVersions.map(toFullVersion);
+        async contentLoaded({ content, actions }) {
+            contentHelpers.updateContent(content);
 
-      await createAllRoutes({
-        baseUrl,
-        versions,
-        options,
-        actions,
-        aliasedSource,
-      });
+            const versions: FullVersion[] = content.loadedVersions.map(toFullVersion);
 
-      actions.setGlobalData({
-        path: normalizeUrl([baseUrl, options.routeBasePath]),
-        versions: versions.map(toGlobalDataVersion),
-        breadcrumbs: options.breadcrumbs,
-      });
-    },
+            await createAllRoutes({
+                baseUrl,
+                versions,
+                options,
+                actions,
+                aliasedSource,
+            });
 
-    configureWebpack() {
-      return {
-        ignoreWarnings: [
-          // Suppress warnings about non-existing of versions file.
-          (e) =>
-            e.message.includes("Can't resolve") &&
-            e.message.includes(VERSIONS_JSON_FILE),
-        ],
-        resolve: {
-          alias: {
-            '~docs': pluginDataDirRoot,
-          },
+            actions.setGlobalData({
+                path: normalizeUrl([baseUrl, options.routeBasePath]),
+                versions: versions.map(toGlobalDataVersion),
+                breadcrumbs: options.breadcrumbs,
+            });
         },
-        module: {
-          rules: [docsMDXLoaderRule],
+
+        configureWebpack() {
+            return {
+                ignoreWarnings: [
+                    // Suppress warnings about non-existing of versions file.
+                    (e) =>
+                        e.message.includes("Can't resolve") &&
+                        e.message.includes(VERSIONS_JSON_FILE),
+                ],
+                resolve: {
+                    alias: {
+                        '~docs': pluginDataDirRoot,
+                    },
+                },
+                module: {
+                    rules: [docsMDXLoaderRule],
+                },
+            };
         },
-      };
-    },
-  };
+    };
 }
 
-export {validateOptions} from './options';
+export { validateOptions } from './options';
diff --git a/src/sidebars/index.ts b/src/sidebars/index.ts
index 1566ec82175a2c2dcd9f7c37752388b9094c260e..28880e6eacab867807e8fa4ba4002f194e71c442 100644
--- a/src/sidebars/index.ts
+++ b/src/sidebars/index.ts
@@ -9,121 +9,122 @@ import fs from 'fs-extra';
 import path from 'path';
 import _ from 'lodash';
 import logger from '@docusaurus/logger';
-import {loadFreshModule, Globby} from '@docusaurus/utils';
+import { loadFreshModule, Globby } from '@docusaurus/utils';
 import Yaml from 'js-yaml';
 import combinePromises from 'combine-promises';
-import {validateSidebars, validateCategoryMetadataFile} from './validation';
-import {normalizeSidebars} from './normalization';
-import {processSidebars} from './processor';
-import {postProcessSidebars} from './postProcessor';
-import type {PluginOptions} from '@docusaurus/plugin-content-docs';
-import type {SidebarsConfig, Sidebars, SidebarProcessorParams} from './types';
+import { validateSidebars, validateCategoryMetadataFile } from './validation';
+import { normalizeSidebars } from './normalization';
+import { processSidebars } from './processor';
+import { postProcessSidebars } from './postProcessor';
+import type { PluginOptions } from '@docusaurus/plugin-content-docs';
+import type { SidebarsConfig, Sidebars, SidebarProcessorParams } from './types';
+
+export * from './types';
 
 export const DefaultSidebars: SidebarsConfig = {
-  defaultSidebar: [
-    {
-      type: 'autogenerated',
-      dirName: '.',
-    },
-  ],
+    defaultSidebar: [
+        {
+            type: 'autogenerated',
+            dirName: '.',
+        },
+    ],
 };
 
 export const DisabledSidebars: SidebarsConfig = {};
 
 // If a path is provided, make it absolute
 export function resolveSidebarPathOption(
-  siteDir: string,
-  sidebarPathOption: PluginOptions['sidebarPath'],
+    siteDir: string,
+    sidebarPathOption: PluginOptions['sidebarPath'],
 ): PluginOptions['sidebarPath'] {
-  return sidebarPathOption
-    ? path.resolve(siteDir, sidebarPathOption)
-    : sidebarPathOption;
+    return sidebarPathOption
+        ? path.resolve(siteDir, sidebarPathOption)
+        : sidebarPathOption;
 }
 
 async function readCategoriesMetadata(contentPath: string) {
-  const categoryFiles = await Globby('**/_category_.{json,yml,yaml}', {
-    cwd: contentPath,
-  });
-  const categoryToFile = _.groupBy(categoryFiles, path.dirname);
-  return combinePromises(
-    _.mapValues(categoryToFile, async (files, folder) => {
-      const filePath = files[0]!;
-      if (files.length > 1) {
-        logger.warn`There are more than one category metadata files for path=${folder}: ${files.join(
-          ', ',
-        )}. The behavior is undetermined.`;
-      }
-      const content = await fs.readFile(
-        path.join(contentPath, filePath),
-        'utf-8',
-      );
-      try {
-        return validateCategoryMetadataFile(Yaml.load(content));
-      } catch (err) {
-        logger.error`The docs sidebar category metadata file path=${filePath} looks invalid!`;
-        throw err;
-      }
-    }),
-  );
+    const categoryFiles = await Globby('**/_category_.{json,yml,yaml}', {
+        cwd: contentPath,
+    });
+    const categoryToFile = _.groupBy(categoryFiles, path.dirname);
+    return combinePromises(
+        _.mapValues(categoryToFile, async (files, folder) => {
+            const filePath = files[0]!;
+            if (files.length > 1) {
+                logger.warn`There are more than one category metadata files for path=${folder}: ${files.join(
+                    ', ',
+                )}. The behavior is undetermined.`;
+            }
+            const content = await fs.readFile(
+                path.join(contentPath, filePath),
+                'utf-8',
+            );
+            try {
+                return validateCategoryMetadataFile(Yaml.load(content));
+            } catch (err) {
+                logger.error`The docs sidebar category metadata file path=${filePath} looks invalid!`;
+                throw err;
+            }
+        }),
+    );
 }
 
 async function loadSidebarsFileUnsafe(
-  sidebarFilePath: string | false | undefined,
+    sidebarFilePath: string | false | undefined,
 ): Promise<SidebarsConfig> {
-  // false => no sidebars
-  if (sidebarFilePath === false) {
-    return DisabledSidebars;
-  }
+    // false => no sidebars
+    if (sidebarFilePath === false) {
+        return DisabledSidebars;
+    }
 
-  // undefined => defaults to autogenerated sidebars
-  if (typeof sidebarFilePath === 'undefined') {
-    return DefaultSidebars;
-  }
+    // undefined => defaults to autogenerated sidebars
+    if (typeof sidebarFilePath === 'undefined') {
+        return DefaultSidebars;
+    }
 
-  // Non-existent sidebars file: no sidebars
-  // Note: this edge case can happen on versioned docs, not current version
-  // We avoid creating empty versioned sidebars file with the CLI
-  if (!(await fs.pathExists(sidebarFilePath))) {
-    return DisabledSidebars;
-  }
+    // Non-existent sidebars file: no sidebars
+    // Note: this edge case can happen on versioned docs, not current version
+    // We avoid creating empty versioned sidebars file with the CLI
+    if (!(await fs.pathExists(sidebarFilePath))) {
+        return DisabledSidebars;
+    }
 
-  // We don't want sidebars to be cached because of hot reloading.
-  const module = await loadFreshModule(sidebarFilePath);
+    // We don't want sidebars to be cached because of hot reloading.
+    const module = await loadFreshModule(sidebarFilePath);
 
-  // TODO unsafe, need to refactor and improve validation
-  return module as SidebarsConfig;
+    // TODO unsafe, need to refactor and improve validation
+    return module as SidebarsConfig;
 }
 
 export async function loadSidebarsFile(
-  sidebarFilePath: string | false | undefined,
+    sidebarFilePath: string | false | undefined,
 ): Promise<SidebarsConfig> {
-  const sidebars = await loadSidebarsFileUnsafe(sidebarFilePath);
+    const sidebars = await loadSidebarsFileUnsafe(sidebarFilePath);
 
-  // TODO unsafe, need to refactor and improve validation
-  return sidebars as SidebarsConfig;
+    // TODO unsafe, need to refactor and improve validation
+    return sidebars as SidebarsConfig;
 }
 
 export async function loadSidebars(
-  sidebarFilePath: string | false | undefined,
-  options: SidebarProcessorParams,
+    sidebarFilePath: string | false | undefined,
+    options: SidebarProcessorParams,
 ): Promise<Sidebars> {
-  try {
-    const sidebarsConfig = await loadSidebarsFileUnsafe(sidebarFilePath);
-    const normalizedSidebars = normalizeSidebars(sidebarsConfig);
-    validateSidebars(normalizedSidebars);
-    const categoriesMetadata = await readCategoriesMetadata(
-      options.version.contentPath,
-    );
-    const processedSidebars = await processSidebars(
-      normalizedSidebars,
-      categoriesMetadata,
-      options,
-    );
-    return postProcessSidebars(processedSidebars, options);
-  } catch (err) {
-    logger.error`Sidebars file at path=${
-      sidebarFilePath as string
-    } failed to be loaded.`;
-    throw err;
-  }
+    try {
+        const sidebarsConfig = await loadSidebarsFileUnsafe(sidebarFilePath);
+        const normalizedSidebars = normalizeSidebars(sidebarsConfig);
+        validateSidebars(normalizedSidebars);
+        const categoriesMetadata = await readCategoriesMetadata(
+            options.version.contentPath,
+        );
+        const processedSidebars = await processSidebars(
+            normalizedSidebars,
+            categoriesMetadata,
+            options,
+        );
+        return postProcessSidebars(processedSidebars, options);
+    } catch (err) {
+        logger.error`Sidebars file at path=${sidebarFilePath as string
+            } failed to be loaded.`;
+        throw err;
+    }
 }
